%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /home3/y14/y14/di1c13/cgpack/head/cgca_m3sld.F90
Compiled : 02/18/16  16:36:41
Compiler : Version 8.3.7
Ftnlx    : Version 8318 (libcif 83016)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=ivybridge -hstatic -D__CRAYXC
           -D__CRAY_IVYBRIDGE -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries
           -c -eacFn -dm -m2 -rl -DCRAY=yes
           -I/opt/cray/cce/8.3.7/craylibs/x86-64/include
           -I/opt/cray/mpt/7.1.1/gni/mpich2-cray/83/include
           -I/opt/cray/libsci/13.0.1/CRAY/83/sandybridge/include
           -I/opt/cray/rca/1.0.0-2.0502.57212.2.56.ari/include
           -I/opt/cray/alps/5.2.3-2.0502.9295.14.14.ari/include
           -I/opt/cray/xpmem/0.1-2.0502.57015.1.15.ari/include
           -I/opt/cray/gni-headers/4.0-1.0502.10317.9.2.ari/include
           -I/opt/cray/dmapp/7.0.1-1.0502.10246.8.47.ari/include
           -I/opt/cray/pmi/5.0.6-1.0000.10439.140.2.ari/include
           -I/opt/cray/ugni/6.0-1.0502.10245.9.9.ari/include
           -I/opt/cray/udreg/2.3.2-1.0502.9889.2.20.ari/include
           -I/opt/cray/cce/8.3.7/craylibs/x86-64/pkgconfig/../include
           -I/opt/cray/cce/8.3.7/craylibs/x86-64/include
           -I/opt/cray/wlm_detect/1.0-1.0502.57063.1.1.ari/include
           -I/opt/cray/krca/1.0.0-2.0502.57202.2.45.ari/include
           -I/opt/cray-hss-devel/7.2.0/include cgca_m3sld.F90

ftnlx report
------------
Source   : /home3/y14/y14/di1c13/cgpack/head/cgca_m3sld.F90
Date     : 02/18/2016  16:36:42


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !$Id: cgca_m3sld.F90 176 2015-12-15 16:16:58Z mexas $
    2.    
    3.    !*robodoc*m* CGPACK/cgca_m3sld
    4.    !  NAME
    5.    !    cgca_m3sld
    6.    !  SYNOPSIS
    7.    
    8.    module cgca_m3sld
    9.    
   10.    !  DESCRIPTION
   11.    !    Module dealing with solidification
   12.    !  AUTHOR
   13.    !    Anton Shterenlikht
   14.    !  COPYRIGHT
   15.    !    See CGPACK_Copyright
   16.    !  CONTAINS
   17.    !    cgca_sld, cgca_sld1, cgca_sld2, and on Cray, cgca_sld3
   18.    !  USES
   19.    !    cgca_m1co, cgca_m2hx, cgca_m2red
   20.    !  USED BY
   21.    !    cgca
   22.    !  SOURCE
   23.    
   24.    use cgca_m1co
   25.    use cgca_m2hx
   26.    use cgca_m2red
   27.    
   28.    implicit none
   29.    
   30.    private
   31.    public :: cgca_sld, cgca_sld1, cgca_sld2
   32.    #ifndef IFORT
   33.    public :: cgca_sld3
   34.    #endif
   35.    
   36.    contains
   37.    
   38.    !*roboend*
   39.    
   40.    
   41.    !*robodoc*s* cgca_m3sld/cgca_sld
   42.    !  NAME
   43.    !    cgca_sld
   44.    !  SYNOPSIS
   45.    
   46.    subroutine cgca_sld( coarray, periodicbc, iter, heartbeat, solid )
   47.    
   48.    !  INPUTS
   49.    
   50.    integer( kind=iarr ), allocatable, intent( inout ) ::                  &
   51.      coarray(:,:,:,:)[:,:,:]
   52.    integer( kind=idef ), intent( in ) :: iter, heartbeat
   53.    logical( kind=ldef ), intent( in ) :: periodicbc
   54.    
   55.    !  OUTPUT
   56.    
   57.    logical( kind=ldef ), intent( out ) :: solid
   58.    
   59.    !  SIDE EFFECTS
   60.    !    State of coarray changed
   61.    !  DESCRIPTION
   62.    !    This routine scans over all cgca_liquid_state cells and
   63.    !    gives them a chance to attach to a grain.
   64.    !    Thus the grains grow and the liquid phase decreases.
   65.    !    The routine can be run for a number of iterations, or
   66.    !    until the whole model has solidified, i.e. no more
   67.    !    liquid phase left.
   68.    !
   69.    !    Inputs:
   70.    !    - coarray - the model
   71.    !    - periodicbc - if .true. periodic boundary conditions are used,
   72.    !      i.e. global halo exchange is called after every iteration
   73.    !    - iter - number of solidification iterations, if <=0 then do
   74.    !      until the coarray has solidified; if >0 then proceed until
   75.    !      solid or "iter" iterations have been completed, whichever is sooner
   76.    !    - heartbeat - if >0 then dump a simple message every heartbeat
   77.    !      iterations
   78.    !
   79.    !    Outputs:
   80.    !    - solid - .true. if the coarray is fully solid, .false. otherwise
   81.    !
   82.    !    At least one value .gt. cgca_liquid_state must exist on at least
   83.    !    one image.
   84.    !    At least one cgca_liquid_state value must exist on at least one image.
   85.    !    Positive values represent solid phase.
   86.    !  NOTES
   87.    !    All images must call this routine!
   88.    !  USES
   89.    !  USED BY
   90.    !    none, end user
   91.    !  SOURCE
   92.    
   93.    real :: candidate(3)
   94.    
   95.    integer( kind=iarr ), allocatable :: array( : , : , : )
   96.    integer :: i, errstat
   97.    integer( kind=idef ) :: &
   98.      lbv(4),      & ! lower bounds of the complete (plus virtual) coarray
   99.      ubv(4),      & ! upper bounds of the complete (plus virtual) coarray
  100.      lbr(4),      & ! lower bounds of the "real" coarray, lower virtual+1
  101.      ubr(4),      & ! upper bounds of the "real" coarray, upper virtual-1
  102.      thisimage   ,& ! to avoid repeated calls to this_image()
  103.      numimages   ,& ! to avoid repeated calls to num_images()
  104.      x1          ,& ! local coordinates in an array, which are also
  105.      x2          ,& ! do loop counters
  106.      x3          ,& !
  107.      step(3)     ,& ! a random neighbouring cell, out of 26 possibilities
  108.      iteration      ! solidification iteration
  109.    
  110.    ! Must be SAVEd to conform
  111.    logical( kind=ldef ), save ::                                          &
  112.      yesnuclei [*],   & ! true if a positive value exists in coarray 
  113.      finished [*],    & ! true if all coarray values are positive  
  114.      allfinished [*]    ! true if all coarray values are positive
  115.                         ! on all images
  116.    
  117.    ! .true. if a grain value in coarray exists at least on one image
  118.    logical( kind=ldef ) :: allyesnuc
  119.    
  120.    ! "finished" is calculated by each image and then the value
  121.    ! is analysed by image 1 to calculate "allfinished".
  122.    ! Then all other images read "allfinished" from image 1 for
  123.    ! synchronisation.
  124.    !
  125.    ! Important: when checking for finished, use only the real
  126.    ! parts of coarray. Do not analyse the virtual (halo) elements!
  127.    
  128.    ! get image number and number of images
  129.    thisimage = this_image()
  130.    numimages = num_images()
  131.    
  132.    !*************************************************
  133.    ! Sanity checks
  134.    !*************************************************
  135.    
  136.    ! check for allocated
  137.    if ( .not. allocated( coarray ) ) &
  138.      error stop "ERROR: cgca_sld: coarray is not allocated"
  139.    
  140.    ! determine the extents
  141.    lbv = lbound( coarray )
ftn-6205 ftn: VECTOR File = cgca_m3sld.F90, Line = 141 
  A loop starting at line 141 was vectorized with a single vector iteration.

  142.    ubv = ubound( coarray )
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 142 
  A loop starting at line 142 was fused with the loop starting at line 141.

  143.    lbr = lbv + 1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 143 
  A loop starting at line 143 was fused with the loop starting at line 141.

  144.    ubr = ubv - 1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 144 
  A loop starting at line 144 was fused with the loop starting at line 141.

  145.    
  146.    ! check that at least one positive value exists (nuclei)
  147.    ! and not all values are positive (completely solid).
  148.    yesnuclei = .false.
  149.    if ( any( coarray(lbr(1):ubr(1), lbr(2):ubr(2), lbr(3):ubr(3),         &
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 149 
  A loop starting at line 149 was not vectorized because it contains multiple potential exits.

  150.                      cgca_state_type_grain) .gt. cgca_liquid_state))      &
  151.      yesnuclei=.true.
  152.    
  153.    finished = .false.
  154.    if ( all( coarray(lbr(1):ubr(1), lbr(2):ubr(2), lbr(3):ubr(3),         &
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 154 
  A loop starting at line 154 was not vectorized because it contains multiple potential exits.

  155.                      cgca_state_type_grain) .gt. cgca_liquid_state))      &
  156.      finished=.true.
  157.    
  158.    ! image 1 calculates the global values
  159.    if ( thisimage .eq. 1 ) then
  160.      allyesnuc = .false.
  161.      do i = 1 , numimages
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 161 
  A loop starting at line 161 was not vectorized because it contains multiple potential exits.

  162.        if ( yesnuclei[i] ) then
  163.          allyesnuc = .true.
  164.          exit 
  165.        end if
  166.      end do
  167.    
  168.      allfinished = .true. 
  169.      do i = 1 , numimages
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 169 
  A loop starting at line 169 was not vectorized because it contains multiple potential exits.

  170.        if ( .not. finished[i] ) then
  171.          allfinished=.false.
  172.          exit 
  173.        end if
  174.      end do
  175.    
  176.      ! report an error if no nuclei found
  177.      if ( .not. allyesnuc ) then
  178.        write (*,'(a)') "ERROR: cgca_sld: no nuclei found"
  179.        error stop
  180.      end if
  181.    
  182.      ! report an error if no liquid phase found
  183.      if ( allfinished ) then
  184.        write (*,'(a)') "ERROR: cgca_sld: already solid"
  185.        error stop
  186.      end if
  187.        
  188.    end if
  189.    
  190.    !*************************************************
  191.    ! End of sanity checks. All seems fine, proceed.
  192.    !*************************************************
  193.    
  194.    ! All images wait for image 1 here.
  195.    sync all
  196.    
  197.    ! Mark as not solid initially
  198.    solid = .false.
  199.    
  200.    ! allocate the temp array
  201.    allocate( array( lbv(1) : ubv(1) , lbv(2) : ubv(2) , lbv(3) : ubv(3) ),&
ftn-7418 ftn: CAUTION File = cgca_m3sld.F90, Line = 201 
  Fortran allocatable variable "array" may be used before being allocated.

  202.              stat = errstat )
  203.    if ( errstat .ne. 0 ) then
  204.      write (*,'(a,i0)')                                                   &
  205.        "ERROR: cgca_sld: allocate( array ), img: ", thisimage
  206.      error stop
  207.    end if
  208.    
  209.    ! initialise the iteration counter
  210.    iteration = 1
  211.    
  212.    ! at this point allfinished=.false. on image 1 and not
  213.    ! initialised on all other images!
  214.    
  215.    ! start the main loop
  216.    main: do
ftn-6288 ftn: VECTOR File = cgca_m3sld.F90, Line = 216 
  A loop starting at line 216 was not vectorized because it contains a call to subroutine "cgca_hxi" on line 219.

  217.    
  218.    ! halo exchange
  219.    call cgca_hxi( coarray )
               ^                   
ftn-3095 ftn: IPA CGCA_SLD, File = cgca_m3sld.F90, Line = 219, Column = 6 
  "cgca_hxi" (called from "cgca_sld") was not inlined because the containing loop does I/O.

  220.    if ( periodicbc ) call cgca_hxg( coarray )
                                 ^                   
ftn-3095 ftn: IPA CGCA_SLD, File = cgca_m3sld.F90, Line = 220, Column = 24 
  "cgca_hxg" (called from "cgca_sld") was not inlined because the containing loop does I/O.

  221.    
  222.    sync all
  223.    
  224.    ! do the iteration if not finished
  225.    fini: if ( .not. finished ) then
  226.    
  227.    ! copy coarray, grain state type, into a local array
  228.    array = coarray( : , : , : , cgca_state_type_grain )
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 228 
   A loop nest at line 228 collapsed to a single loop.

ftn-6231 ftn: VECTOR File = cgca_m3sld.F90, Line = 228 
  A statement was replaced by a library call.

  229.    
  230.    ! solidify array
  231.    
  232.    do x3 = lbr(3), ubr(3)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 232 
  A loop starting at line 232 was not vectorized because the iteration space is too irregular.

  233.    do x2 = lbr(2), ubr(2)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 233 
  A loop starting at line 233 was not vectorized because the iteration space is too irregular.

  234.    do x1 = lbr(1), ubr(1)
ftn-6315 ftn: VECTOR File = cgca_m3sld.F90, Line = 234 
  A loop starting at line 234 was not vectorized because the target array (candidate) would require rank expansion.

  235.      if ( coarray( x1, x2, x3, cgca_state_type_grain ) .eq.               &
  236.                                              cgca_liquid_state ) then
  237.        call random_number( candidate )     ! 0 .le. candidate .lt. 1
ftn-6271 ftn: VECTOR File = cgca_m3sld.F90, Line = 237 
  A loop starting at line 237 was not vectorized because its trip count is too small.

  238.        step = nint( candidate*2 - 1 )      ! step = [-1 0 1]
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 238 
  A loop starting at line 238 was fused with the loop starting at line 237.

  239.        array( x1, x2, x3 ) = coarray( x1 + step(1) ,                      &
  240.                                       x2 + step(2) ,                      &
  241.                                       x3 + step(3) ,                      &
  242.                                                cgca_state_type_grain )
  243.      end if
  244.    end do
  245.    end do
  246.    end do
  247.    
  248.    ! update coarray
  249.    coarray( : , : , : , cgca_state_type_grain ) = array
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 249 
   A loop nest at line 249 collapsed to a single loop.

ftn-6202 ftn: VECTOR File = cgca_m3sld.F90, Line = 249 
  A loop starting at line 249 was replaced by a library call.

  250.    
  251.    ! see if finished (all solid)
  252.    finished = .true.
  253.    if ( any( coarray( lbr(1):ubr(1) , lbr(2):ubr(2) , lbr(3):ubr(3),      &
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 253 
  A loop starting at line 253 was not vectorized because it contains multiple potential exits.

  254.       cgca_state_type_grain ) .eq. cgca_liquid_state ) ) finished = .false.
  255.    
  256.    end if fini
  257.    
  258.    ! Global sync here. All images must calculate "finished"
  259.    ! before image 1 reads these values from all images
  260.    ! and calculates the global "allfinished".
  261.    sync all 
  262.    
  263.    ! image 1 checks if finished and sends heartbeat signal
  264.    if ( thisimage .eq. 1 ) then
  265.    
  266.      ! assume we are done
  267.      allfinished = .true.
  268.      do i = 1 , numimages
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 268 
  A loop starting at line 268 was not vectorized because it contains multiple potential exits.

  269.    
  270.        ! but if any image is not done, then we are not done either
  271.        if ( .not. finished[i] ) then 
  272.          allfinished = .false.
  273.          exit
  274.        end if
  275.      end do
  276.    
  277.      ! send heartbeat signal to terminal
  278.      if ( heartbeat .gt. 0 ) then
  279.        if ( mod( iteration, heartbeat ) .eq. 0 )                          &
  280.          write (*,'(a,i0)') "INFO: cgca_sld: iterations completed: ",     &
  281.                             iteration
  282.      end if
  283.    
  284.    end if
  285.    
  286.    ! need sync all here
  287.    sync all
  288.    
  289.    ! get allfinished from image 1
  290.    allfinished = allfinished [ 1 ]
  291.    
  292.    ! exit if done
  293.    if ( allfinished ) then
  294.      solid = .true.
  295.      exit main
  296.    end if
  297.    
  298.    if ( iter .gt. 0 .and. iteration .ge. iter ) exit main
  299.    
  300.    ! increment the iteration counter
  301.    iteration = iteration + 1
  302.    
  303.    end do main
  304.    
  305.    deallocate( array, stat=errstat )
  306.    if ( errstat .ne. 0 ) then
  307.      write (*,'(a,i0)')                                                   &
  308.        "ERROR: cgca_sld: deallocate( array ), img: ", thisimage
  309.      error stop
  310.    end if
  311.    
  312.    ! no sync needed because deallocation of coarrays above
  313.    ! is an implicit sync all
  314.    
  315.    end subroutine cgca_sld
  316.    
  317.    !*roboend*
  318.    
  319.    
  320.    !*robodoc*s* cgca_m3sld/cgca_sld1
  321.    !  NAME
  322.    !    cgca_sld1
  323.    !  SYNOPSIS
  324.    
  325.    subroutine cgca_sld1(coarray,iter,heartbeat,solid)
  326.    
  327.    !  INPUTS
  328.    
  329.    integer(kind=iarr),allocatable,intent(inout) :: coarray(:,:,:,:)[:,:,:]
  330.    integer(kind=idef),intent(in) :: iter,heartbeat
  331.    
  332.    !  OUTPUT
  333.    
  334.    logical(kind=ldef),intent(out) :: solid
  335.    
  336.    !  SIDE EFFECTS
  337.    !    State of coarray changed
  338.    !  DESCRIPTION
  339.    !    This is a simplified version of cgca_sld.
  340.    !    Most checks have been removed and sync instances
  341.    !    reduced. In addition, it does not support the periodic BC.
  342.    !
  343.    !    Inputs:
  344.    !    - coarray - the model
  345.    !    - iter - number of solidification iterations, if <=0 then do
  346.    !      until the coarray has solidified; if >0 then proceed until
  347.    !      solid or "iter" iterations have been completed, whichever is sooner
  348.    !    - heartbeat - if >0 then dump a simple message every heartbeat
  349.    !      iterations
  350.    !
  351.    !    Outputs:
  352.    !    - solid - .true. if the coarray is fully solid, .false. otherwise
  353.    !
  354.    !    At least one value .ne. cgca_liquid_state must exist on at least
  355.    !    one image.
  356.    !    At least one cgca_liquid_state value must exist on at least one image.
  357.    !  NOTES
  358.    !    All images must call this routine!
  359.    !  USES
  360.    !  USED BY
  361.    !    none, end user
  362.    !  SOURCE
  363.    
  364.    real :: candidate(3)
  365.    
  366.    integer(kind=iarr),allocatable :: array(:,:,:)
  367.    integer :: errstat
  368.    integer(kind=idef) :: &
  369.      lbv(4)      ,& ! lower bounds of the complete (plus virtual) coarray
  370.      ubv(4)      ,& ! upper bounds of the complete (plus virtual) coarray
  371.      lbr(4)      ,& ! lower bounds of the "real" coarray, lower virtual+1
  372.      ubr(4)      ,& ! upper bounds of the "real" coarray, upper virtual-1
  373.      thisimage   ,& ! to avoid repeated calls to this_image() and num_images()
  374.      nimages     ,& !
  375.      x1,x2,x3    ,& ! local coordinates in an array, which are also
  376.      step(3)     ,& ! a random neighbouring cell, out of 26 possibilities
  377.      iteration      ! solidification iteration
  378.    
  379.    ! true if the local array has solidified
  380.    logical(kind=ldef) :: finished
  381.    
  382.    ! number of finished images
  383.    ! NOTE: if *really* many images are used, then the kind will need to
  384.    ! be increased!
  385.    integer(kind=idef),allocatable :: nfini[:]
  386.    
  387.    ! finished is set to .true. on all images at the beginning of each
  388.    ! iteration. At the end of the iteration finished[1] is set to .false.
  389.    ! by *all* images if their local finished is .false..
  390.    !
  391.    ! Important: when checking for finished, use only the real
  392.    ! parts of coarray. Do not analyse the virtual (halo) elements!
  393.    
  394.    ! get image number and number of images
  395.    thisimage = this_image()
  396.    nimages = num_images()
  397.    
  398.    !*************************************************
  399.    ! Sanity checks
  400.    !*************************************************
  401.    
  402.    ! check for allocated
  403.    if (.not. allocated(coarray)) &
  404.      error stop "ERROR: cgca_sld1: coarray is not allocated"
  405.    
  406.    !*************************************************
  407.    ! End of sanity checks. All seems fine, proceed.
  408.    !*************************************************
  409.    
  410.    ! determine the extents
  411.    lbv=lbound(coarray)
ftn-6205 ftn: VECTOR File = cgca_m3sld.F90, Line = 411 
  A loop starting at line 411 was vectorized with a single vector iteration.

  412.    ubv=ubound(coarray)
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 412 
  A loop starting at line 412 was fused with the loop starting at line 411.

  413.    lbr=lbv+1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 413 
  A loop starting at line 413 was fused with the loop starting at line 411.

  414.    ubr=ubv-1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 414 
  A loop starting at line 414 was fused with the loop starting at line 411.

  415.    
  416.    ! allocate the integer array to store the number of finished images
  417.    allocate(nfini[*],stat=errstat)
ftn-7418 ftn: CAUTION File = cgca_m3sld.F90, Line = 417 
  Fortran allocatable variable "nfini" may be used before being allocated.

  418.    if (errstat.ne.0) then
  419.     write (*,'(a,i0)') "ERROR: cgca_sld1: image ",thisimage
  420.     write (*,'(a)') "ERROR: cgca_sld1: cannot allocate nfini"
  421.     error stop
  422.    end if
  423.    
  424.    ! allocate the temp array
  425.    allocate(array(lbv(1):ubv(1),lbv(2):ubv(2),lbv(3):ubv(3)),stat=errstat)
ftn-7418 ftn: CAUTION File = cgca_m3sld.F90, Line = 425 
  Fortran allocatable variable "array" may be used before being allocated.

  426.    if (errstat.ne.0) then
  427.      write (*,'(a,i0)') "ERROR: cgca_sld1: image ",thisimage
  428.      write (*,'(a)') "ERROR: cgca_sld1: cannot allocate array"
  429.      error stop
  430.    end if
  431.    
  432.    ! Mark as not solid initially.
  433.    solid = .false.
  434.    
  435.    ! set finished to .false.
  436.    finished = .false.
  437.    
  438.    ! initialise the iteration counter
  439.    iteration=1
  440.    
  441.    ! start the main loop
  442.    main: do
ftn-6262 ftn: VECTOR File = cgca_m3sld.F90, Line = 442 
  A loop starting at line 442 was not vectorized because it contains a call to a subroutine or function on line 451.

  443.    
  444.    ! set the number of finished images to zero.
  445.    nfini = 0
  446.    
  447.    ! do if not finished
  448.    fini: if (.not. finished) then
  449.    
  450.    ! copy coarray, grain state type, into a local array
  451.    array=coarray(:,:,:,cgca_state_type_grain)
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 451 
   A loop nest at line 451 collapsed to a single loop.

ftn-6231 ftn: VECTOR File = cgca_m3sld.F90, Line = 451 
  A statement was replaced by a library call.

  452.    
  453.    ! solidify array
  454.    
  455.    do x3 = lbr(3),ubr(3)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 455 
  A loop starting at line 455 was not vectorized because the iteration space is too irregular.

  456.    do x2 = lbr(2),ubr(2)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 456 
  A loop starting at line 456 was not vectorized because the iteration space is too irregular.

  457.    do x1 = lbr(1),ubr(1)
ftn-6315 ftn: VECTOR File = cgca_m3sld.F90, Line = 457 
  A loop starting at line 457 was not vectorized because the target array (candidate) would require rank expansion.

  458.     if (coarray(x1,x2,x3,cgca_state_type_grain) .eq. cgca_liquid_state) then
  459.      call random_number(candidate)     ! 0 .le. candidate .lt. 1
ftn-6271 ftn: VECTOR File = cgca_m3sld.F90, Line = 459 
  A loop starting at line 459 was not vectorized because its trip count is too small.

  460.      step = nint(candidate*2-1)        ! step = [-1 0 1]
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 460 
  A loop starting at line 460 was fused with the loop starting at line 459.

  461.      array (x1,x2,x3) = &
  462.       coarray (x1+step(1),x2+step(2),x3+step(3),cgca_state_type_grain)
  463.     end if
  464.    end do
  465.    end do
  466.    end do
  467.    
  468.    ! update coarray
  469.    coarray(:,:,:,cgca_state_type_grain) = array
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 469 
   A loop nest at line 469 collapsed to a single loop.

ftn-6202 ftn: VECTOR File = cgca_m3sld.F90, Line = 469 
  A loop starting at line 469 was replaced by a library call.

  470.    
  471.    ! set finish to .true. if finished (all solid)
  472.    finished = all( coarray(lbr(1):ubr(1), lbr(2):ubr(2), lbr(3):ubr(3), &
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 472 
  A loop starting at line 472 was not vectorized because it contains multiple potential exits.

  473.                      cgca_state_type_grain) .ne. cgca_liquid_state)
  474.    
  475.    end if fini
  476.    
  477.    ! Each image, but first, waits for the lower image. Then it sets
  478.    ! finished[1] to .false. if not finished.
  479.    if (thisimage .eq. 1) then
  480.     if ( finished ) nfini = nfini + 1
  481.    ! write (*,*) "image", thisimage, finished, nfini
  482.    else
  483.     sync images (thisimage-1)
  484.     if ( finished ) nfini[1] = nfini[1] + 1
ftn-6076 ftn: SCALAR File = cgca_m3sld.F90, Line = 484 
  An atomic memory operation was used for this statement.

  485.    ! write (*,*) "image", thisimage, finished, nfini[1]
  486.    end if
  487.    
  488.    ! each image, but last, waits for the next one
  489.    if (thisimage .lt. nimages) sync images (thisimage+1)
  490.    
  491.    ! halo exchange
  492.    call cgca_hxi(coarray) 
               ^                  
ftn-3095 ftn: IPA CGCA_SLD1, File = cgca_m3sld.F90, Line = 492, Column = 6 
  "cgca_hxi" (called from "cgca_sld1") was not inlined because the containing loop does I/O.

  493.    
  494.    ! exit if done the required number of iterations 
  495.    if (iter .gt. 0 .and. iteration .ge. iter) exit main
  496.    
  497.    ! increment the iteration counter
  498.    iteration = iteration+1
  499.    
  500.    ! image 1 sends heartbeat signal
  501.    if (thisimage .eq. 1) then
  502.     if (heartbeat .gt. 0) then
  503.       if (mod(iteration,heartbeat) .eq. 0) write (*,'(a,i0)') &
  504.        "INFO: cgca_sld1: iterations completed: ", &
  505.          iteration
  506.     end if
  507.    end if
  508.    
  509.    sync all
  510.    
  511.    ! exit if finished
  512.    if ( nfini[1] .eq. nimages ) then
  513.     solid = .true.
  514.     exit main
  515.    end if
  516.    
  517.    end do main
  518.    
  519.    ! deallocate all local arrays
  520.    
  521.    deallocate(array,stat=errstat)
  522.    if (errstat.ne.0) then
  523.      write (*,'(a,i0)') "ERROR: cgca_sld1: image ",thisimage
  524.      write (*,'(a)') "ERROR: cgca_sld1: cannot deallocate array"
  525.      error stop
  526.    end if
  527.    
  528.    deallocate(nfini,stat=errstat)
  529.    if (errstat.ne.0) then
  530.      write (*,'(a,i0)') "ERROR: cgca_sld1: image ",thisimage
  531.      write (*,'(a)') "ERROR: cgca_sld1: cannot deallocate nfini"
  532.      error stop
  533.    end if
  534.    
  535.    end subroutine cgca_sld1
  536.    
  537.    !*roboend*
  538.    
  539.    
  540.    !*robodoc*s* cgca_m3sld/cgca_sld2
  541.    !  NAME
  542.    !    cgca_sld2
  543.    !  SYNOPSIS
  544.    
  545.    subroutine cgca_sld2(coarray,p,iter,heartbeat,solid)
  546.    
  547.    !  INPUTS
  548.    
  549.    integer(kind=iarr),allocatable,intent(inout) :: coarray(:,:,:,:)[:,:,:]
  550.    integer(kind=idef),intent(in) :: p,iter,heartbeat
  551.    
  552.    !  OUTPUT
  553.    
  554.    logical(kind=ldef),intent(out) :: solid
  555.    
  556.    !  SIDE EFFECTS
  557.    !    State of coarray changed
  558.    !  DESCRIPTION
  559.    !    This is a simplified version of cgca_sld.
  560.    !    Most checks have been removed. cgca_redand is called to check that
  561.    !    all images have solidified.
  562.    !    In addition, it does not support the periodic BC.
  563.    !
  564.    !    Inputs:
  565.    !    - coarray - the model
  566.    !    - p - this routine only works when the number of images is a power
  567.    !      of 2. So p is the power: num_images = 2**p. Note that no check
  568.    !      for this is made in this routine. This is left up to the calling
  569.    !      routine, most probably the main program.
  570.    !    - iter - number of solidification iterations, if <=0 then do
  571.    !      until the coarray has solidified; if >0 then proceed until
  572.    !      solid or "iter" iterations have been completed, whichever is sooner
  573.    !    - heartbeat - if >0 then dump a simple message every heartbeat
  574.    !      iterations
  575.    !
  576.    !    Outputs:
  577.    !    - solid - .true. if the coarray is fully solid, .false. otherwise
  578.    !
  579.    !    At least one value .ne. cgca_liquid_state must exist on at least
  580.    !    one image.
  581.    !    At least one cgca_liquid_state value must exist on at least one image.
  582.    !  NOTES
  583.    !    All images must call this routine!
  584.    !  USES
  585.    !    cgca_redand
  586.    !  USED BY
  587.    !    none, end user
  588.    !  SOURCE
  589.    
  590.    real :: candidate(3)
  591.    
  592.    integer(kind=iarr),allocatable :: array(:,:,:)
  593.    integer :: errstat
  594.    integer(kind=idef) :: &
  595.      lbv(4)      ,& ! lower bounds of the complete (plus virtual) coarray
  596.      ubv(4)      ,& ! upper bounds of the complete (plus virtual) coarray
  597.      lbr(4)      ,& ! lower bounds of the "real" coarray, lower virtual+1
  598.      ubr(4)      ,& ! upper bounds of the "real" coarray, upper virtual-1
  599.      img,nimages ,& ! to avoid repeated calls to this_image() and num_images()
  600.      x1,x2,x3    ,& ! local coordinates in an array, which are also
  601.      step(3)     ,& ! a random neighbouring cell, out of 26 possibilities
  602.      iteration      ! solidification iteration
  603.    
  604.    ! true if the local array has solidified
  605.    ! It must have SAVE attribute or be ALLOCATABLE. Right now SAVE seems
  606.    ! faster. The memory freed after this routine, if ALLOCATABLE was used
  607.    ! instead is insignificant.
  608.    logical(kind=ldef),save :: finished[*]
  609.    
  610.    ! "finished" is set to .false. on all images at the beginning of
  611.    ! each iteration. At the end of an iteration, new "finished" value
  612.    ! is calculated on each image. Then cgca_redall is called. It places
  613.    ! the result in "finished" on every image. So after that every image
  614.    ! needs to check just its local "finished". If it is .true., then exit
  615.    ! the loop. If it is .false., then do another solidification iteration.
  616.    
  617.    ! get image number and number of images
  618.    img     = this_image()
  619.    nimages = num_images()
  620.    
  621.    !*************************************************
  622.    ! Sanity checks
  623.    !*************************************************
  624.    
  625.    ! check for allocated
  626.    if (.not. allocated(coarray)) &
  627.      error stop "ERROR: cgca_sld2: coarray is not allocated"
  628.    
  629.    !*************************************************
  630.    ! End of sanity checks. All seems fine, proceed.
  631.    !*************************************************
  632.    
  633.    ! determine the extents
  634.    lbv=lbound(coarray)
ftn-6205 ftn: VECTOR File = cgca_m3sld.F90, Line = 634 
  A loop starting at line 634 was vectorized with a single vector iteration.

  635.    ubv=ubound(coarray)
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 635 
  A loop starting at line 635 was fused with the loop starting at line 634.

  636.    lbr=lbv+1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 636 
  A loop starting at line 636 was fused with the loop starting at line 634.

  637.    ubr=ubv-1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 637 
  A loop starting at line 637 was fused with the loop starting at line 634.

  638.    
  639.    ! Mark as not solid initially.
  640.    solid = .false.
  641.    
  642.    ! initialise the iteration counter
  643.    iteration=1
  644.    
  645.    ! allocate the temp array
  646.    ! Implicit sync all here
  647.    allocate(array(lbv(1):ubv(1),lbv(2):ubv(2),lbv(3):ubv(3)),stat=errstat)
ftn-7418 ftn: CAUTION File = cgca_m3sld.F90, Line = 647 
  Fortran allocatable variable "array" may be used before being allocated.

  648.    if (errstat.ne.0) then
  649.      write (*,'(a,i0)') "ERROR: cgca_sld2: image ", img
  650.      write (*,'(a)') "ERROR: cgca_sld2: cannot allocate array"
  651.      error stop
  652.    end if
  653.    
  654.    ! start the main loop
  655.    main: do
ftn-6262 ftn: VECTOR File = cgca_m3sld.F90, Line = 655 
  A loop starting at line 655 was not vectorized because it contains a call to a subroutine or function on line 658.

  656.    
  657.     ! copy coarray, grain state type, into a local array
  658.     array = coarray(:,:,:,cgca_state_type_grain)
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 658 
   A loop nest at line 658 collapsed to a single loop.

ftn-6231 ftn: VECTOR File = cgca_m3sld.F90, Line = 658 
  A statement was replaced by a library call.

  659.    
  660.     ! solidify array
  661.     do x3 = lbr(3),ubr(3)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 661 
  A loop starting at line 661 was not vectorized because the iteration space is too irregular.

  662.     do x2 = lbr(2),ubr(2)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 662 
  A loop starting at line 662 was not vectorized because the iteration space is too irregular.

  663.     do x1 = lbr(1),ubr(1)
ftn-6315 ftn: VECTOR File = cgca_m3sld.F90, Line = 663 
  A loop starting at line 663 was not vectorized because the target array (candidate) would require rank expansion.

  664.      if (coarray(x1,x2,x3,cgca_state_type_grain) .eq. cgca_liquid_state) then
  665.       call random_number(candidate)     ! 0 .le. candidate .lt. 1
ftn-6271 ftn: VECTOR File = cgca_m3sld.F90, Line = 665 
  A loop starting at line 665 was not vectorized because its trip count is too small.

  666.       step = nint(candidate*2-1)        ! step = [-1 0 1]
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 666 
  A loop starting at line 666 was fused with the loop starting at line 665.

  667.       array (x1,x2,x3) = &
  668.        coarray (x1+step(1),x2+step(2),x3+step(3),cgca_state_type_grain)
  669.      end if
  670.     end do
  671.     end do
  672.     end do
  673.    
  674.     ! update coarray
  675.     coarray(:,:,:,cgca_state_type_grain) = array
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 675 
   A loop nest at line 675 collapsed to a single loop.

ftn-6202 ftn: VECTOR File = cgca_m3sld.F90, Line = 675 
  A loop starting at line 675 was replaced by a library call.

  676.    
  677.     ! image 1 sends heartbeat signal
  678.     if ( img .eq. 1 ) then
  679.      if ( heartbeat .gt. 0 ) then
  680.       if ( mod(iteration,heartbeat) .eq. 0 ) write (*,'(a,i0)') &
  681.        "INFO: cgca_sld2: iterations completed: ", iteration
  682.      end if
  683.     end if
  684.    
  685.     ! increment the iteration counter
  686.     iteration = iteration+1
  687.    
  688.     ! exit if done the required number of iterations 
  689.     if (iter .gt. 0 .and. iteration .ge. iter) exit main
  690.    
  691.     ! set finish to .true. if finished (all solid)
  692.     finished = all( coarray(lbr(1):ubr(1), lbr(2):ubr(2), lbr(3):ubr(3), &
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 692 
  A loop starting at line 692 was not vectorized because it contains multiple potential exits.

  693.                      cgca_state_type_grain) .ne. cgca_liquid_state)
  694.    
  695.     ! halo exchange in preparation for the next iteration
  696.     call cgca_hxi(coarray) 
                ^                  
ftn-3095 ftn: IPA CGCA_SLD2, File = cgca_m3sld.F90, Line = 696, Column = 7 
  "cgca_hxi" (called from "cgca_sld2") was not inlined because the containing loop does I/O.

  697.    
  698.    ! not sure if I need a global barrier here or not
  699.     sync all
  700.    
  701.     ! do the collective AND on finished
  702.     call cgca_redand(finished,p)
                ^                       
ftn-3095 ftn: IPA CGCA_SLD2, File = cgca_m3sld.F90, Line = 702, Column = 7 
  "cgca_redand" (called from "cgca_sld2") was not inlined because the containing loop does I/O.

  703.    
  704.     ! Now all images will have the updated "finished".
  705.     ! Exit if finished
  706.     if ( finished ) then
  707.      solid = .true.
  708.      exit main
  709.     end if
  710.    
  711.    end do main
  712.    
  713.    ! deallocate all local arrays
  714.    
  715.    deallocate(array,stat=errstat)
  716.    if (errstat.ne.0) then
  717.      write (*,'(a,i0)') "ERROR: cgca_sld2: image ", img
  718.      write (*,'(a)') "ERROR: cgca_sld2: cannot deallocate array"
  719.      error stop
  720.    end if
  721.    
  722.    end subroutine cgca_sld2
ftn-5001 ftn: NOTE File = cgca_m3sld.F90, Line = 722 
  Local variable "NIMAGES" is assigned a value but never used.

  723.    
  724.    !*roboend*
  725.    
  726.    
  727.    !*robodoc*s* cgca_m3sld/cgca_sld3
  728.    !  NAME
  729.    !    cgca_sld3
  730.    !  SYNOPSIS
  731.    
  732.    #ifndef IFORT
  733.    
  734.    subroutine cgca_sld3(coarray,iter,heartbeat,solid)
  735.    
  736.    !  INPUTS
  737.    
  738.    integer(kind=iarr),allocatable,intent(inout) :: coarray(:,:,:,:)[:,:,:]
  739.    integer(kind=idef),intent(in) :: iter,heartbeat
  740.    
  741.    !  OUTPUT
  742.    
  743.    logical(kind=ldef),intent(out) :: solid
  744.    
  745.    !  SIDE EFFECTS
  746.    !    State of coarray changed
  747.    !  DESCRIPTION
  748.    !    This is a simplified version of cgca_sld.
  749.    !    Most checks have been removed.
  750.    !    We use co_sum reduction.
  751.    !    In addition, it does not support the periodic BC.
  752.    !
  753.    !    Inputs:
  754.    !    - coarray - the model
  755.    !    - iter - number of solidification iterations, if <=0 then do
  756.    !      until the coarray has solidified; if >0 then proceed until
  757.    !      solid or "iter" iterations have been completed, whichever is sooner
  758.    !    - heartbeat - if >0 then dump a simple message every heartbeat
  759.    !      iterations
  760.    !
  761.    !    Outputs:
  762.    !    - solid - .true. if the coarray is fully solid, .false. otherwise
  763.    !
  764.    !    At least one value .ne. cgca_liquid_state must exist on at least
  765.    !    one image.
  766.    !    At least one cgca_liquid_state value must exist on at least one image.
  767.    !  NOTES
  768.    !    All images must call this routine!
  769.    !  USES
  770.    !  USED BY
  771.    !    none, end user
  772.    !  SOURCE
  773.    
  774.    real :: candidate(3)
  775.    
  776.    integer( kind=iarr ), allocatable :: array(:,:,:)
  777.    integer :: errstat
  778.    integer( kind=idef ) :: &
  779.      lbv(4)      ,& ! lower bounds of the complete (plus virtual) coarray
  780.      ubv(4)      ,& ! upper bounds of the complete (plus virtual) coarray
  781.      lbr(4)      ,& ! lower bounds of the "real" coarray, lower virtual+1
  782.      ubr(4)      ,& ! upper bounds of the "real" coarray, upper virtual-1
  783.      img,nimages ,& ! to avoid repeated calls to this_image() and num_images()
  784.      x1,x2,x3    ,& ! local coordinates in an array, which are also
  785.      step(3)     ,& ! a random neighbouring cell, out of 26 possibilities
  786.      iteration      ! solidification iteration
  787.    
  788.    ! true if the local array has solidified
  789.    logical( kind=ldef ) :: finished
  790.    
  791.    ! finished indicator (findicator) is an integer variable to use with CO_SUM.
  792.    ! It is set to 1 on all images at the beginning of every loop.
  793.    ! if (finished) findicator = 0.
  794.    ! Then if co_sum(findicator) is zero, then all images have finished.
  795.    integer( kind=idef ),save :: findicator[*]
  796.    
  797.    ! get image number and number of images
  798.        img = this_image()
  799.    nimages = num_images()
  800.    
  801.    !*************************************************
  802.    ! Sanity checks
  803.    !*************************************************
  804.    
  805.    ! check for allocated
  806.    if ( .not. allocated(coarray) ) &
  807.      error stop "ERROR: cgca_sld2: coarray is not allocated"
  808.    
  809.    !*************************************************
  810.    ! End of sanity checks. All seems fine, proceed.
  811.    !*************************************************
  812.    
  813.    ! determine the extents
  814.    lbv = lbound( coarray )
ftn-6205 ftn: VECTOR File = cgca_m3sld.F90, Line = 814 
  A loop starting at line 814 was vectorized with a single vector iteration.

  815.    ubv = ubound( coarray )
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 815 
  A loop starting at line 815 was fused with the loop starting at line 814.

  816.    lbr = lbv + 1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 816 
  A loop starting at line 816 was fused with the loop starting at line 814.

  817.    ubr = ubv - 1
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 817 
  A loop starting at line 817 was fused with the loop starting at line 814.

  818.    
  819.    ! Mark as not solid initially.
  820.    solid = .false.
  821.    
  822.    ! initialise the iteration counter
  823.    iteration = 1
  824.    
  825.    ! allocate the temp array
  826.    allocate( array( lbv(1):ubv(1) , lbv(2):ubv(2) , lbv(3):ubv(3) ),      &
ftn-7418 ftn: CAUTION File = cgca_m3sld.F90, Line = 826 
  Fortran allocatable variable "array" may be used before being allocated.

  827.              source = 0_iarr,                                             &
  828.              stat=errstat )
  829.    if ( errstat .ne. 0 ) then
  830.      write (*,'(2(a,i0))') "ERROR: cgca_sld2: img: ", img,                &
  831.                          " allocate( array ), stat=", errstat
  832.      error stop
  833.    end if
  834.    
  835.    ! start the main loop
  836.    main: do
ftn-6262 ftn: VECTOR File = cgca_m3sld.F90, Line = 836 
  A loop starting at line 836 was not vectorized because it contains a call to a subroutine or function on line 839.

  837.    
  838.     ! copy coarray, grain state type, into a local array
  839.     array = coarray( : , : , : , cgca_state_type_grain )
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 839 
   A loop nest at line 839 collapsed to a single loop.

ftn-6231 ftn: VECTOR File = cgca_m3sld.F90, Line = 839 
  A statement was replaced by a library call.

  840.    
  841.     ! solidify array
  842.     do x3 = lbr(3),ubr(3)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 842 
  A loop starting at line 842 was not vectorized because the iteration space is too irregular.

  843.     do x2 = lbr(2),ubr(2)
ftn-6306 ftn: VECTOR File = cgca_m3sld.F90, Line = 843 
  A loop starting at line 843 was not vectorized because the iteration space is too irregular.

  844.     do x1 = lbr(1),ubr(1)
ftn-6315 ftn: VECTOR File = cgca_m3sld.F90, Line = 844 
  A loop starting at line 844 was not vectorized because the target array (candidate) would require rank expansion.

  845.      if (coarray(x1,x2,x3,cgca_state_type_grain) .eq. cgca_liquid_state) then
  846.       call random_number(candidate)     ! 0 .le. candidate .lt. 1
ftn-6271 ftn: VECTOR File = cgca_m3sld.F90, Line = 846 
  A loop starting at line 846 was not vectorized because its trip count is too small.

  847.       step = nint(candidate*2-1)        ! step = [-1 0 1]
ftn-6004 ftn: SCALAR File = cgca_m3sld.F90, Line = 847 
  A loop starting at line 847 was fused with the loop starting at line 846.

  848.       array (x1,x2,x3) = &
  849.        coarray (x1+step(1),x2+step(2),x3+step(3),cgca_state_type_grain)
  850.      end if
  851.     end do
  852.     end do
  853.     end do
  854.    
  855.     ! update coarray
  856.     coarray(:,:,:,cgca_state_type_grain) = array
ftn-6066 ftn: SCALAR File = cgca_m3sld.F90, Line = 856 
   A loop nest at line 856 collapsed to a single loop.

ftn-6202 ftn: VECTOR File = cgca_m3sld.F90, Line = 856 
  A loop starting at line 856 was replaced by a library call.

  857.    
  858.     ! image 1 sends heartbeat signal
  859.     if ( img .eq. 1 ) then
  860.      if ( heartbeat .gt. 0 ) then
  861.       if ( mod(iteration,heartbeat) .eq. 0 ) write (*,'(a,i0)') &
  862.        "INFO: cgca_sld2: iterations completed: ", iteration
  863.      end if
  864.     end if
  865.    
  866.     ! increment the iteration counter
  867.     iteration = iteration + 1
  868.    
  869.     ! exit if done the required number of iterations 
  870.     if (iter .gt. 0 .and. iteration .ge. iter) exit main
  871.    
  872.     ! set finish to .true. if finished (all solid)
  873.     finished = all( coarray(lbr(1):ubr(1), lbr(2):ubr(2), lbr(3):ubr(3), &
ftn-6334 ftn: VECTOR File = cgca_m3sld.F90, Line = 873 
  A loop starting at line 873 was not vectorized because it contains multiple potential exits.

  874.                      cgca_state_type_grain) .ne. cgca_liquid_state)
  875.     findicator = 1_idef
  876.     if (finished) findicator = 0_idef
  877.    
  878.    
  879.     ! halo exchange in preparation for the next iteration
  880.     call cgca_hxi(coarray) 
                ^                  
ftn-3095 ftn: IPA CGCA_SLD3, File = cgca_m3sld.F90, Line = 880, Column = 7 
  "cgca_hxi" (called from "cgca_sld3") was not inlined because the containing loop does I/O.

  881.    
  882.     ! do the collective AND on finished
  883.     call co_sum(findicator)
                ^                  
ftn-3021 ftn: IPA CGCA_SLD3, File = cgca_m3sld.F90, Line = 883, Column = 7 
  "__caf_cosum" (called from "cgca_sld3") was not inlined because the compiler was unable to locate the routine.

  884.    
  885.     ! Now all images will have the updated findicator.
  886.     ! Exit if finished
  887.     if ( findicator .eq. 0 ) then
  888.      solid = .true.
  889.      exit main
  890.     end if
  891.    
  892.    end do main
  893.    
  894.    ! deallocate all local arrays
  895.    
  896.    deallocate(array,stat=errstat)
  897.    if (errstat.ne.0) then
  898.      write (*,'(a,i0)') "ERROR: cgca_sld2: image ", img
  899.      write (*,'(a)') "ERROR: cgca_sld2: cannot deallocate array"
  900.      error stop
  901.    end if
  902.    
  903.    end subroutine cgca_sld3
ftn-5001 ftn: NOTE File = cgca_m3sld.F90, Line = 903 
  Local variable "NIMAGES" is assigned a value but never used.

  904.    
  905.    #endif
  906.    
  907.    !*roboend*
  908.    
  909.    end module cgca_m3sld


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ALL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 154, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 472, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 692, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 873, file cgca_m3sld.F90)

Name  Messages
----  --------
ALLOCATED(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 137, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 403, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 626, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 806, file cgca_m3sld.F90)

Name  Messages
----  --------
ANY(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 149, file cgca_m3sld.F90)
                   CGCA_SLD in CGCA_M3SLD (Line 253, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_HXG in CGCA_M2HX
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 220, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_HXI in CGCA_M2HX
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 219, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 492, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 696, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 880, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_M1CO
      Defined as:  No definitions.

      Used By:     CGCA_M3SLD

Name  Messages
----  --------
CGCA_M2HX
      Defined as:  No definitions.

      Used By:     CGCA_M3SLD

Name  Messages
----  --------
CGCA_M2RED
      Defined as:  No definitions.

      Used By:     CGCA_M3SLD

Name  Messages
----  --------
CGCA_M3SLD
      Defined as:  Module (line 8, file cgca_m3sld.F90)

        Uses:      CGCA_M1CO
                   ISO_FORTRAN_ENV  (indirectly)
                   CGCA_M2HX
                   CGCA_M2RED

Name  Messages
----  --------
CGCA_REDAND in CGCA_M2RED
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD2 in CGCA_M3SLD (Line 702, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_SLD in CGCA_M3SLD
      Defined as:  Subroutine (line 31, file cgca_m3sld.F90)

      Interface:   None

      Calls:       CGCA_HXG in CGCA_M2HX (Line 220, file cgca_m3sld.F90)
                   CGCA_HXI in CGCA_M2HX (Line 219, file cgca_m3sld.F90)
                   THIS_IMAGE(Intrinsic) (Line 129, file cgca_m3sld.F90)
                   shmem_n_pes(Intrinsic) (Line 130, file cgca_m3sld.F90)
                   ALLOCATED(Intrinsic) (Line 137, file cgca_m3sld.F90)
                   LBOUND(Intrinsic) (Line 141, file cgca_m3sld.F90)
                   UBOUND(Intrinsic) (Line 142, file cgca_m3sld.F90)
                   ANY(Intrinsic) (Line 149, file cgca_m3sld.F90)
                   ANY(Intrinsic) (Line 253, file cgca_m3sld.F90)
                   ALL(Intrinsic) (Line 154, file cgca_m3sld.F90)
                   RANDOM_NUMBER(Intrinsic) (Line 237, file cgca_m3sld.F90)
                   NINT(Intrinsic) (Line 238, file cgca_m3sld.F90)
                   MOD(Intrinsic) (Line 279, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_SLD1 in CGCA_M3SLD
      Defined as:  Subroutine (line 31, file cgca_m3sld.F90)

      Interface:   None

      Calls:       CGCA_HXI in CGCA_M2HX (Line 492, file cgca_m3sld.F90)
                   THIS_IMAGE(Intrinsic) (Line 395, file cgca_m3sld.F90)
                   shmem_n_pes(Intrinsic) (Line 396, file cgca_m3sld.F90)
                   ALLOCATED(Intrinsic) (Line 403, file cgca_m3sld.F90)
                   LBOUND(Intrinsic) (Line 411, file cgca_m3sld.F90)
                   UBOUND(Intrinsic) (Line 412, file cgca_m3sld.F90)
                   RANDOM_NUMBER(Intrinsic) (Line 459, file cgca_m3sld.F90)
                   NINT(Intrinsic) (Line 460, file cgca_m3sld.F90)
                   ALL(Intrinsic) (Line 472, file cgca_m3sld.F90)
                   MOD(Intrinsic) (Line 503, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_SLD2 in CGCA_M3SLD
      Defined as:  Subroutine (line 31, file cgca_m3sld.F90)

      Interface:   None

      Calls:       CGCA_HXI in CGCA_M2HX (Line 696, file cgca_m3sld.F90)
                   CGCA_REDAND in CGCA_M2RED (Line 702, file cgca_m3sld.F90)
                   THIS_IMAGE(Intrinsic) (Line 618, file cgca_m3sld.F90)
                   shmem_n_pes(Intrinsic) (Line 619, file cgca_m3sld.F90)
                   ALLOCATED(Intrinsic) (Line 626, file cgca_m3sld.F90)
                   LBOUND(Intrinsic) (Line 634, file cgca_m3sld.F90)
                   UBOUND(Intrinsic) (Line 635, file cgca_m3sld.F90)
                   RANDOM_NUMBER(Intrinsic) (Line 665, file cgca_m3sld.F90)
                   NINT(Intrinsic) (Line 666, file cgca_m3sld.F90)
                   MOD(Intrinsic) (Line 680, file cgca_m3sld.F90)
                   ALL(Intrinsic) (Line 692, file cgca_m3sld.F90)

Name  Messages
----  --------
CGCA_SLD3 in CGCA_M3SLD
      Defined as:  Subroutine (line 33, file cgca_m3sld.F90)

      Interface:   None

      Calls:       CGCA_HXI in CGCA_M2HX (Line 880, file cgca_m3sld.F90)
                   THIS_IMAGE(Intrinsic) (Line 798, file cgca_m3sld.F90)
                   shmem_n_pes(Intrinsic) (Line 799, file cgca_m3sld.F90)
                   ALLOCATED(Intrinsic) (Line 806, file cgca_m3sld.F90)
                   LBOUND(Intrinsic) (Line 814, file cgca_m3sld.F90)
                   UBOUND(Intrinsic) (Line 815, file cgca_m3sld.F90)
                   RANDOM_NUMBER(Intrinsic) (Line 846, file cgca_m3sld.F90)
                   NINT(Intrinsic) (Line 847, file cgca_m3sld.F90)
                   MOD(Intrinsic) (Line 861, file cgca_m3sld.F90)
                   ALL(Intrinsic) (Line 873, file cgca_m3sld.F90)
                   CO_SUM(Intrinsic) (Line 883, file cgca_m3sld.F90)

Name  Messages
----  --------
CO_SUM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD3 in CGCA_M3SLD (Line 883, file cgca_m3sld.F90)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
HUGE(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ISO_FORTRAN_ENV
      Defined as:  No definitions.

      Used By:     CGCA_M3SLD  (indirectly)

Name  Messages
----  --------
KIND(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
LBOUND(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 141, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 411, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 634, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 814, file cgca_m3sld.F90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 279, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 503, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 680, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 861, file cgca_m3sld.F90)

Name  Messages
----  --------
NINT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 238, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 460, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 666, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 847, file cgca_m3sld.F90)

Name  Messages
----  --------
RANDOM_NUMBER(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 237, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 459, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 665, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 846, file cgca_m3sld.F90)

Name  Messages
----  --------
SELECTED_INT_KIND(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SELECTED_REAL_KIND(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
THIS_IMAGE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 129, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 395, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 618, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 798, file cgca_m3sld.F90)

Name  Messages
----  --------
UBOUND(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 142, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 412, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 635, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 815, file cgca_m3sld.F90)

Name  Messages
----  --------
shmem_n_pes(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_SLD in CGCA_M3SLD (Line 130, file cgca_m3sld.F90)
                   CGCA_SLD1 in CGCA_M3SLD (Line 396, file cgca_m3sld.F90)
                   CGCA_SLD2 in CGCA_M3SLD (Line 619, file cgca_m3sld.F90)
                   CGCA_SLD3 in CGCA_M3SLD (Line 799, file cgca_m3sld.F90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
