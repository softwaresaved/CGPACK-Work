%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /home3/y14/y14/di1c13/cgpack/head/cgca_m2alloc.f90
Compiled : 02/18/16  16:36:31
Compiler : Version 8.3.7
Ftnlx    : Version 8318 (libcif 83016)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=ivybridge -hstatic -D__CRAYXC
           -D__CRAY_IVYBRIDGE -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries
           -c -eacFn -dm -m2 -rl -I/opt/cray/cce/8.3.7/craylibs/x86-64/include
           -I/opt/cray/mpt/7.1.1/gni/mpich2-cray/83/include
           -I/opt/cray/libsci/13.0.1/CRAY/83/sandybridge/include
           -I/opt/cray/rca/1.0.0-2.0502.57212.2.56.ari/include
           -I/opt/cray/alps/5.2.3-2.0502.9295.14.14.ari/include
           -I/opt/cray/xpmem/0.1-2.0502.57015.1.15.ari/include
           -I/opt/cray/gni-headers/4.0-1.0502.10317.9.2.ari/include
           -I/opt/cray/dmapp/7.0.1-1.0502.10246.8.47.ari/include
           -I/opt/cray/pmi/5.0.6-1.0000.10439.140.2.ari/include
           -I/opt/cray/ugni/6.0-1.0502.10245.9.9.ari/include
           -I/opt/cray/udreg/2.3.2-1.0502.9889.2.20.ari/include
           -I/opt/cray/cce/8.3.7/craylibs/x86-64/pkgconfig/../include
           -I/opt/cray/cce/8.3.7/craylibs/x86-64/include
           -I/opt/cray/wlm_detect/1.0-1.0502.57063.1.1.ari/include
           -I/opt/cray/krca/1.0.0-2.0502.57202.2.45.ari/include
           -I/opt/cray-hss-devel/7.2.0/include cgca_m2alloc.f90

ftnlx report
------------
Source   : /home3/y14/y14/di1c13/cgpack/head/cgca_m2alloc.f90
Date     : 02/18/2016  16:36:31


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !$Id: cgca_m2alloc.f90 198 2016-01-27 21:54:47Z mexas $
    2.    
    3.    !*********************************************************************72
    4.    
    5.    !*robodoc*m* CGPACK/cgca_m2alloc
    6.    !  NAME
    7.    !    cgca_m2alloc
    8.    !  SYNOPSIS
    9.    
   10.    module cgca_m2alloc
   11.    
   12.    !  DESCRIPTION
   13.    !    Module dealing with the allocation and deallocation of various
   14.    !    arrays. Several routines are used because they allocate arrays
   15.    !    of different dimensionality, i.e.
   16.    !          (:)[:,:,:]
   17.    !      (:,:,:)[:,:,:]
   18.    !    (:,:,:,:)[:,:,:]
   19.    !  AUTHOR
   20.    !    Anton Shterenlikht
   21.    !  COPYRIGHT
   22.    !    See CGPACK_Copyright
   23.    !  CONTAINS
   24.    !    cgca_as, cgca_ds, cgca_av, cgca_dv, cgca_art, cgca_drt
   25.    !  USES
   26.    !    cgca_m1co
   27.    !  USED BY
   28.    !    cgca
   29.    !  SOURCE
   30.    
   31.    use cgca_m1co
   32.    implicit none
   33.    
   34.    private
   35.    public :: cgca_as, cgca_ds, cgca_av, cgca_dv, cgca_art, cgca_drt
   36.    
   37.    contains
   38.    
   39.    !*roboend*
   40.    
   41.    
   42.    !*robodoc*s* cgca_m2alloc/cgca_as
   43.    !  NAME
   44.    !    cgca_as
   45.    !  SYNOPSIS
   46.    
   47.    subroutine cgca_as( l1, u1, l2, u2, l3, u3, col1, cou1, col2, cou2,    &
   48.     col3, props, coarray )
   49.    
   50.    !  INPUTS
   51.    
   52.    integer(kind=idef),intent(in) ::                                       &
   53.     l1,   & ! Lower and uppper bounds of the coarray along
   54.     u1,   & ! dimensions 1,2, and 3.
   55.     l2,   &
   56.     u2,   &
   57.     l3,   &
   58.     u3,   &
   59.     col1, & ! Lower and uppper cobounds of the coarray along
   60.     cou1, & ! codimensions 1, 2 and 3. Note the last upper
   61.     col2, & ! cobound is not specified. In allocate it is
   62.     cou2, & ! given as * to allow for arbitrary number of
   63.     col3, & ! images at run time.
   64.     props   ! Number of cell state properties to use.
   65.    
   66.    integer(kind=iarr),allocatable,intent(inout) ::                        &
   67.     coarray(:,:,:,:)[:,:,:]  ! coarray to allocate
   68.    
   69.    !  SIDE EFFECTS
   70.    !    coarray becomes allocated with all values assigned
   71.    !    cgca_liquid_state.
   72.    !
   73.    !    Global array variables cgca_slcob, cgca_sucob are assigned values.
   74.    !  DESCRIPTION
   75.    !    This routine allocates a 4D arrays on each image. The first 3
   76.    !    dimensions define a cell, and the last, 4th dimension defines the
   77.    !    number or the cell state. The routine increases extent by 2
   78.    !    in each direction, thus creating space for storing halos.
   79.    !    No check for the validity of the coarray dimension is made here.
   80.    !    The user should make sure the coarray dimension values passed
   81.    !    to the routine make sense.
   82.    !  NOTES
   83.    !    We want the coarray to have halos to exchange data between
   84.    !    processors. So need to increase the extent by 2 in each dimension.
   85.    !  USES
   86.    !    none 
   87.    !  USED BY
   88.    !    cgca_m2alloc
   89.    !  SOURCE
   90.    
   91.    integer, parameter :: halo=1
   92.    integer :: errstat = 0
   93.    
   94.    if ( .not. allocated(coarray) ) allocate( coarray(                     &
   95.      l1-halo:u1+halo, l2-halo:u2+halo, l3-halo:u3+halo, props)            &
   96.      [col1:cou1, col2:cou2, col3:*], source=cgca_liquid_state,            &
   97.        stat=errstat)
   98.    if ( errstat .ne. 0 ) then
   99.      write (*,'(2(a,i0))') 'ERROR: cgca_m2alloc/cgca_as:&
  100.        & allocate( coarray ), image: ', this_image(), " err. code: ",     &
  101.        errstat
  102.      error stop
  103.    end if
  104.    
  105.    ! Assign the cobounds to the global variables for use by other routines
  106.    cgca_slcob = lcobound( coarray )
ftn-6271 ftn: VECTOR File = cgca_m2alloc.f90, Line = 106 
  A loop starting at line 106 was not vectorized because its trip count is too small.

ftn-6008 ftn: SCALAR File = cgca_m2alloc.f90, Line = 106 
  A loop starting at line 106 was unwound.

  107.    cgca_sucob = ucobound( coarray )
ftn-6004 ftn: SCALAR File = cgca_m2alloc.f90, Line = 107 
  A loop starting at line 107 was fused with the loop starting at line 106.

  108.    
  109.    end subroutine cgca_as
  110.    
  111.    !*roboend*
  112.    
  113.    
  114.    !*robodoc*s* cgca_m2alloc/cgca_ds
  115.    !  NAME
  116.    !    cgca_ds
  117.    !  SYNOPSIS
  118.    
  119.    subroutine cgca_ds(coarray)
  120.    
  121.    !  INPUT
  122.    
  123.    integer(kind=iarr),allocatable,intent(inout) :: coarray(:,:,:,:)[:,:,:]
  124.    
  125.    !  SIDE EFFECTS
  126.    !    coarray becomes deallocated
  127.    !  DESCRIPTION
  128.    ! This routine deallocates a 3D coarray. It first checks whether the
  129.    ! array is allocated. If the array is not allocated, a warning is
  130.    ! issued, but the program is *not* terminated.
  131.    !  USES
  132.    !    none
  133.    !  USED BY
  134.    !    cgca_m2alloc
  135.    !  SOURCE
  136.    
  137.    integer :: errstat
  138.    
  139.    errstat=0
  140.    
  141.    if (allocated(coarray)) then
  142.     deallocate(coarray,stat=errstat)
  143.     if (errstat .ne. 0) then
  144.      write (*,'(a,i0)') "ERROR: cgca_ds: image: ", this_image()
  145.      write (*,'(a)')    "ERROR: cgca_ds: cannot deallocate coarray"
  146.      write (*,'(a,i0)') "ERROR: cgca_ds: error code: ", errstat
  147.      error stop
  148.     end if
  149.    else
  150.     write (*,'(a,i0,a)') "WARNING: cgca_ds: image: ", this_image(), &
  151.      ", coarray is not allocated, cannot deallocate"
  152.    end if
  153.    
  154.    end subroutine cgca_ds
  155.    
  156.    !*roboend*
  157.    
  158.    
  159.    !*robodoc*s* cgca_m2alloc/cgca_av
  160.    !  NAME
  161.    !    cgca_av
  162.    !  SYNOPSIS
  163.    
  164.    subroutine cgca_av(l,u,col1,cou1,col2,cou2,col3,coarray)
  165.    
  166.    !  DESCRIPTION
  167.    !    This routine allocates a 1D coarray of length l:u.
  168.    !  INPUTS
  169.    
  170.    integer(kind=idef),intent(in) :: l,u,col1,cou1,col2,cou2,col3
  171.    integer(kind=ilrg),allocatable,intent(inout) :: coarray(:)[:,:,:]
  172.    
  173.    !  SIDE EFFECTS
  174.    !    coarray becomes allocated, all values are assigned zero
  175.    !  USES
  176.    !    none 
  177.    !  USED BY
  178.    !    cgca_m2alloc
  179.    !  SOURCE
  180.    
  181.    
  182.    integer :: errstat
  183.    
  184.    errstat=0
  185.    
  186.    if (.not. allocated(coarray))                          &
  187.      allocate(coarray(l:u) [col1:cou1,col2:cou2,col3:*],  &
  188.                source = 0_ilrg, stat=errstat)
  189.    
  190.    if (errstat .ne. 0) then
  191.     write (*,'(a,i0)') "ERROR: cgca_av: image: ", this_image()
  192.     write (*,'(a)') "ERROR: cgca_av: cannot allocate coarray"
  193.     write (*,'(a,i0)') "ERROR: cgca_av: error code: ", errstat
  194.     error stop
  195.    end if
  196.    
  197.    end subroutine cgca_av
  198.    
  199.    !*roboend*
  200.    
  201.    
  202.    !*robodoc*s* cgca_m2alloc/cgca_dv
  203.    !  NAME
  204.    !    cgca_dv
  205.    !  SYNOPSIS
  206.    
  207.    subroutine cgca_dv(coarray)
  208.    
  209.    !  INPUT
  210.    
  211.    integer(kind=ilrg),allocatable,intent(inout) :: coarray(:)[:,:,:]
  212.    
  213.    !  SIDE EFFECTS
  214.    !    coarray becomes deallocated
  215.    !  DESCRIPTION
  216.    !    deallocate volume coarray
  217.    !  USES
  218.    !    none
  219.    !  USED BY
  220.    !    cgca_m2alloc
  221.    !  SOURCE
  222.    
  223.    integer :: errstat
  224.    
  225.    errstat=0
  226.    
  227.    if (allocated(coarray)) then
  228.     deallocate(coarray,stat=errstat)
  229.     if (errstat .ne. 0) then
  230.      write (*,'(a,i0)') "ERROR: cgca_dv: image: ", this_image()
  231.      write (*,'(a)') "ERROR: cgca_dv: cannot deallocate coarray"
  232.      write (*,'(a,i0)') "ERROR: cgca_dv: error code: ", errstat
  233.      error stop
  234.     end if
  235.    end if
  236.    
  237.    ! if coarray is not allocated, do nothing
  238.    
  239.    end subroutine cgca_dv
  240.    
  241.    !*roboend*
  242.    
  243.    
  244.    !*robodoc*s* cgca_m2alloc/cgca_art
  245.    !  NAME
  246.    !    cgca_art
  247.    !  SYNOPSIS
  248.    
  249.    subroutine cgca_art(l,u,col1,cou1,col2,cou2,col3,coarray)
  250.    
  251.    !  INPUTS
  252.     
  253.    integer(kind=idef),intent(in) :: l,u,col1,cou1,col2,cou2,col3
  254.    real(kind=rdef),allocatable,intent(inout) :: coarray(:,:,:)[:,:,:]
  255.    
  256.    !  SIDE EFFECTS
  257.    !    coarray becomes allocated
  258.    !  DESCRIPTION
  259.    ! Allocate rotation tensor array. This is an array (l:u,3,3) defined on
  260.    ! every image. Note that the first index is the grain number and
  261.    ! the next two are the rotation tensor. So that the array element
  262.    ! (153,3,1) is the rotation tensor component R31 for grain number 153.
  263.    ! (87,:,:) is a 3x3 matrix defining the full (non-symmetric, but
  264.    ! orthogonal!!!) rotation tensor for grain 87.
  265.    !  NOTES
  266.    !    This routine must be called prior to calling cgca_rt.
  267.    !  USES
  268.    !    none
  269.    !  USED BY
  270.    !    cgca_m2alloc
  271.    !  SOURCE
  272.    
  273.    integer :: errstat
  274.    
  275.    errstat=0
  276.    
  277.    if (.not. allocated(coarray))                              &
  278.      allocate(coarray(l:u,3,3) [col1:cou1,col2:cou2,col3:*],  &
  279.                source = 0.0_rdef, stat=errstat)
  280.    
  281.    if (errstat .ne. 0) then
  282.      write (*,'(a,i0)') "ERROR: cgca_art: image: ", this_image()
  283.      write (*,'(a)') "ERROR: cgca_art: cannot allocate coarray"
  284.      error stop
  285.    end if
  286.    
  287.    end subroutine cgca_art
  288.    
  289.    !*roboend*
  290.    
  291.    
  292.    !*robodoc*s* cgca_m2alloc/cgca_drt
  293.    !  NAME
  294.    !    cgca_drt
  295.    !  SYNOPSIS
  296.    
  297.    subroutine cgca_drt(coarray)
  298.    
  299.    !  INPUT
  300.    
  301.    real(kind=rdef),allocatable,intent(inout) :: coarray(:,:,:)[:,:,:]
  302.    
  303.    !  SIDE EFFECTS
  304.    !    coarray becomes deallocated
  305.    !  DESCRIPTION
  306.    !    Deallocate rotation tensor array.
  307.    !  USES
  308.    !    none
  309.    !  USED BY
  310.    !    cgca_m2alloc
  311.    !  SOURCE
  312.    
  313.    integer :: errstat
  314.    
  315.    errstat=0
  316.    
  317.    if (allocated(coarray)) then
  318.      deallocate(coarray,stat=errstat)
  319.      if (errstat .ne. 0) then
  320.        write (*,'(a,i0)') "ERROR: cgca_drt: image: ", this_image()
  321.        write (*,'(a)') "ERROR: cgca_drt: cannot deallocate coarray"
  322.        error stop
  323.      end if
  324.    end if
  325.    
  326.    ! if coarray is not allocated, do nothing
  327.    
  328.    end subroutine cgca_drt
  329.    
  330.    !*roboend*
  331.    
  332.    end module cgca_m2alloc


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ALLOCATED(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_AS in CGCA_M2ALLOC (Line 94, file cgca_m2alloc.f90)
                   CGCA_DS in CGCA_M2ALLOC (Line 141, file cgca_m2alloc.f90)
                   CGCA_AV in CGCA_M2ALLOC (Line 186, file cgca_m2alloc.f90)
                   CGCA_DV in CGCA_M2ALLOC (Line 227, file cgca_m2alloc.f90)
                   CGCA_ART in CGCA_M2ALLOC (Line 277, file cgca_m2alloc.f90)
                   CGCA_DRT in CGCA_M2ALLOC (Line 317, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_ART in CGCA_M2ALLOC
      Defined as:  Subroutine (line 35, file cgca_m2alloc.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 277, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 282, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_AS in CGCA_M2ALLOC
      Defined as:  Subroutine (line 35, file cgca_m2alloc.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 94, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 100, file cgca_m2alloc.f90)
                   LCOBOUND(Intrinsic) (Line 106, file cgca_m2alloc.f90)
                   UCOBOUND(Intrinsic) (Line 107, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_AV in CGCA_M2ALLOC
      Defined as:  Subroutine (line 35, file cgca_m2alloc.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 186, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 191, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_DRT in CGCA_M2ALLOC
      Defined as:  Subroutine (line 35, file cgca_m2alloc.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 317, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 320, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_DS in CGCA_M2ALLOC
      Defined as:  Subroutine (line 35, file cgca_m2alloc.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 141, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 144, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 150, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_DV in CGCA_M2ALLOC
      Defined as:  Subroutine (line 35, file cgca_m2alloc.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 227, file cgca_m2alloc.f90)
                   THIS_IMAGE(Intrinsic) (Line 230, file cgca_m2alloc.f90)

Name  Messages
----  --------
CGCA_M1CO
      Defined as:  No definitions.

      Used By:     CGCA_M2ALLOC

Name  Messages
----  --------
CGCA_M2ALLOC
      Defined as:  Module (line 10, file cgca_m2alloc.f90)

        Uses:      CGCA_M1CO
                   ISO_FORTRAN_ENV  (indirectly)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
HUGE(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ISO_FORTRAN_ENV
      Defined as:  No definitions.

      Used By:     CGCA_M2ALLOC  (indirectly)

Name  Messages
----  --------
KIND(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
LCOBOUND(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_AS in CGCA_M2ALLOC (Line 106, file cgca_m2alloc.f90)

Name  Messages
----  --------
SELECTED_INT_KIND(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SELECTED_REAL_KIND(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
THIS_IMAGE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_AS in CGCA_M2ALLOC (Line 100, file cgca_m2alloc.f90)
                   CGCA_DS in CGCA_M2ALLOC (Line 144, file cgca_m2alloc.f90)
                   CGCA_DS in CGCA_M2ALLOC (Line 150, file cgca_m2alloc.f90)
                   CGCA_AV in CGCA_M2ALLOC (Line 191, file cgca_m2alloc.f90)
                   CGCA_DV in CGCA_M2ALLOC (Line 230, file cgca_m2alloc.f90)
                   CGCA_ART in CGCA_M2ALLOC (Line 282, file cgca_m2alloc.f90)
                   CGCA_DRT in CGCA_M2ALLOC (Line 320, file cgca_m2alloc.f90)

Name  Messages
----  --------
UCOBOUND(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   CGCA_AS in CGCA_M2ALLOC (Line 107, file cgca_m2alloc.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
